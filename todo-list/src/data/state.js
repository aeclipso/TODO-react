let doRenderComp = () => {}let tasksProps = {    objData: [],    saveProps : function () {        const itemForSave = JSON.stringify(this.objData);        localStorage.setItem("propsTasks", itemForSave);        // this.loadProps();    },    loadProps: function () {        let itemForLoad = JSON.parse(localStorage.getItem("propsTasks"));        console.log("Load: " + itemForLoad);        if (itemForLoad[0] !== null){            this.objData = itemForLoad;        }    }}export const getNextId = (propsObj) => {    console.log(propsObj);    const len = propsObj.objData.length - 1;    try{        console.log(propsObj.objData);        return propsObj.objData[len].id + 1;    } catch (err){        return 0;    }    // if (propsObj.objData.length === null || propsObj.objData.length === undefined) {    //     console.log("if");    //     return (0);    //    // } else {    //     console.log("else");    //     return (propsObj[propsObj.length - 1].id + 1);    // }    // // return (propsObj[propsObj.length - 1].id + 1);    // return propsObj.length +1;}export let addTask = (textTask, dateTask, priorityTask) => {    let newTaskObj = {        id: "",        text: textTask,        title: "",        date: dateTask,        priority: priorityTask,    };    newTaskObj.title = `title of the task ${newTaskObj.id}`;    newTaskObj.id = getNextId(tasksProps);    if (typeof (newTaskObj.date) === "string")        newTaskObj.date = Date();    if (newTaskObj.text === "")        newTaskObj.text = " - ";    tasksProps.objData.push(newTaskObj);    doRenderComp(tasksProps);    tasksProps.saveProps();}export let delTask = (idTask) => {    let idForDel;    for (let i = 0; i < tasksProps.objData.length; i++){        if (tasksProps.objData[i].id === idTask){            idForDel = i;        }        else {            idForDel = 0;        }    }    tasksProps.objData.splice(idForDel, 1);    doRenderComp(tasksProps);    tasksProps.saveProps();}export const subscribe = (observer) => {    doRenderComp = observer;}export default tasksProps;window.global = tasksProps;//TODO: 1) добавить возможность редактирования//TODO: 2) добавить возможность помечать задачу выполненой//TODO: 3) добавить возможность определять тип задачи (рабочая/личная) возможно убрать приоритет и добавить это//TODO: 4) добавить цветовое выделение задачи, чтобы знать какая задача скоро просрочится//TODO: 5) добавить сортировку по дате и типу